<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\output\AirBox.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\output\AirBox.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Sat Sep 29 11:59:21 2018
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; TempAndHumiControl &rArr; TempAndHumiOneShotRead &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1f]">CCM_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1b]">EUART0_IRQHandler</a> from voice.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[2]">HardFault_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1e]">I2C0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[15]">KINT_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[17]">LVD_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1]">NMI_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[6]">PINT0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[7]">PINT1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[8]">PINT2_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[9]">PINT3_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[a]">PINT4_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[b]">PINT5_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[c]">PINT6_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[d]">PINT7_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[18]">PLLLK_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[4]">PendSV_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[14]">RTC_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[21]">RegInit</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[0]">Reset_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1c]">SPI0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1d]">SPI1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[3]">SVC_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[5]">SysTick_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_hr8p506.o(.text) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[e]">T16N0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[f]">T16N1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[10]">T16N2_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[11]">T16N3_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[12]">T32N0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from bluetooth.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from uart1.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[13]">WDT_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[20]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[117]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[119]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[11a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[0]"></a>Reset_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PLLLK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>T16N0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>T16N1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>T16N3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>T32N0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RegInit</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>EUART_ModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUARTInit
</UL>

<P><STRONG><a name="[26]"></a>EUART_BaudConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lib_euart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EUART_BaudConfig &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U7816_Init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_Init
</UL>

<P><STRONG><a name="[28]"></a>EUART_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lib_euart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EUART_Init &rArr; EUART_BaudConfig &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_BaudConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUARTInit
</UL>

<P><STRONG><a name="[e1]"></a>EUART_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib_euart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART0_IRQHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euart1TxStart
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUARTInit
</UL>

<P><STRONG><a name="[df]"></a>EUART_TBIMConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_euart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUARTInit
</UL>

<P><STRONG><a name="[e0]"></a>EUART_RBIMConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lib_euart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUARTInit
</UL>

<P><STRONG><a name="[ea]"></a>EUART_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_euart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART0_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>EUART_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_euart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART0_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>EUART_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>U7816_Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lib_euart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_BaudConfig
</UL>

<P><STRONG><a name="[11c]"></a>EUART_EIOChConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>EUART_EIODirection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>EUART_SendByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_euart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART0_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>EUART_SendHalfWord</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>EUART_SendWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>EUART_RecByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_euart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART0_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>EUART_RecHalfWord</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>EUART_RecWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>GPIO_SetFuncxRegFromPin</STRONG> (Thumb, 1394 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetFuncxRegFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[2c]"></a>GPIO_GetNormalBitOffsetFromPin</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSingalTypeFromPin
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPDERegFromPin
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPUERegFromPin
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDSRegFromPin
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetODERegFromPin
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDirRegFromPin
</UL>

<P><STRONG><a name="[2d]"></a>GPIO_SetDirRegFromPin</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDirRegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[2e]"></a>GPIO_SetODERegFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetODERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[2f]"></a>GPIO_SetDSRegFromPin</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDSRegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[30]"></a>GPIO_SetPUERegFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPUERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[31]"></a>GPIO_SetPDERegFromPin</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPDERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[32]"></a>GPIO_SetSingalTypeFromPin</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[33]"></a>GPIO_Init</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSingalTypeFromPin
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPDERegFromPin
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPUERegFromPin
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDSRegFromPin
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetODERegFromPin
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDirRegFromPin
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFuncxRegFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_I2C_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothIOinit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT_IO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSC2725_IO_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUARTInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EG2805_IO_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
</UL>

<P><STRONG><a name="[34]"></a>GPIO_ReadBit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_ReadBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBluetoothConnectState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_0A
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestControl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
</UL>

<P><STRONG><a name="[35]"></a>GPIO_WriteBit</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaLow
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT_IO_Init
</UL>

<P><STRONG><a name="[36]"></a>GPIO_SetBit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSleep
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeforeTransparentTrans
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothTransparentTransState
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_0A
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryCharging
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1ChannelSwitch
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM25Process
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testOut
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoInMain
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDealInMain
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
</UL>

<P><STRONG><a name="[37]"></a>GPIO_ResetBit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaLow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeforeTransparentTrans
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothCmdState
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothArouse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryCharging
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1ChannelSwitch
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testOut
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoInMain
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDealInMain
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
</UL>

<P><STRONG><a name="[38]"></a>GPIO_ToggleBit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>

<P><STRONG><a name="[39]"></a>PINT_GetPINTxIndexFromPin</STRONG> (Thumb, 174 bytes, Stack size 4 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetITFlag
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_ClearITFlag
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetEnableOrNotFromPin
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetTriggerStyleFromPin
</UL>

<P><STRONG><a name="[3a]"></a>PINT_SetTriggerStyleFromPin</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>

<P><STRONG><a name="[3b]"></a>PINT_GetSELxIndexFromPin</STRONG> (Thumb, 170 bytes, Stack size 4 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetEnableOrNotFromPin
</UL>

<P><STRONG><a name="[3c]"></a>PINT_SetEnableOrNotFromPin</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetSELxIndexFromPin
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>

<P><STRONG><a name="[3d]"></a>PINT_Init</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetEnableOrNotFromPin
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetTriggerStyleFromPin
</UL>

<P><STRONG><a name="[3e]"></a>PINT_ClearITFlag</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
</UL>

<P><STRONG><a name="[3f]"></a>PINT_GetITFlag</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
</UL>

<P><STRONG><a name="[40]"></a>KINT_GetKINTxIndexFromPin</STRONG> (Thumb, 174 bytes, Stack size 4 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetITFlag
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_ClearITFlag
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetEnableOrNotFromPin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetTriggerStyleFromPin
</UL>

<P><STRONG><a name="[41]"></a>KINT_SetTriggerStyleFromPin</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_Init
</UL>

<P><STRONG><a name="[42]"></a>KINT_GetSelxIndexFromPin</STRONG> (Thumb, 170 bytes, Stack size 4 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetEnableOrNotFromPin
</UL>

<P><STRONG><a name="[43]"></a>KINT_SetEnableOrNotFromPin</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetSelxIndexFromPin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_Init
</UL>

<P><STRONG><a name="[44]"></a>KINT_Init</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetEnableOrNotFromPin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetTriggerStyleFromPin
</UL>

<P><STRONG><a name="[45]"></a>KINT_ClearITFlag</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KINT_ClearITFlag &rArr; KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_IRQHandler
</UL>

<P><STRONG><a name="[46]"></a>KINT_GetITFlag</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KINT_GetITFlag &rArr; KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_IRQHandler
</UL>

<P><STRONG><a name="[122]"></a>GPIO_TX0Config</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>GPIO_TX1Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lib_gpio.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, lib_scs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUARTInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
</UL>

<P><STRONG><a name="[124]"></a>SCB_SystemLPConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib_scs.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>SCB_GetCpuID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_scs.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>SysTick_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lib_scs.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>T16Nx_BaseInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
</UL>

<P><STRONG><a name="[127]"></a>T16Nx_CapInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>T16Nx_PMWOutInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>T16Nx_PWMPDZ_Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>T16Nx_MAT0ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_MAT0ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
</UL>

<P><STRONG><a name="[12a]"></a>T16Nx_MAT1ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>T16Nx_MAT2ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>T16Nx_MAT3ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>T16Nx_MAT0Out0Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>T16Nx_MAT1Out0Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>T16Nx_MAT2Out1Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>T16Nx_MAT3Out1Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>T16Nx_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
</UL>

<P><STRONG><a name="[6e]"></a>T16Nx_SetCNT0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
</UL>

<P><STRONG><a name="[131]"></a>T16Nx_SetCNT1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>T16Nx_SetPREMAT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>T16Nx_SetPRECNT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>T16Nx_SetMAT0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
</UL>

<P><STRONG><a name="[134]"></a>T16Nx_SetMAT1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>T16Nx_SetMAT2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>T16Nx_SetMAT3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>T16Nx_SetTOP0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>T16Nx_SetTOP1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>T16Nx_GetMAT0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>T16Nx_GetMAT1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>T16Nx_GetMAT2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>T16Nx_GetMAT3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>T16Nx_GetTOP0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>T16Nx_GetTOP1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>T16Nx_GetCNT0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>T16Nx_GetCNT1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>T16Nx_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>T16Nx_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>T16Nx_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
</UL>

<P><STRONG><a name="[143]"></a>T16Nx_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>T16Nx_PWMBK_Config</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>T16Nx_GetPWMBKF</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>T16Nx_ResetPWMBKF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>T16Nx_PTR_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>T32Nx_BaseInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>T32Nx_CapInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>T32Nx_PMWOutInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>T32Nx_MAT0ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>T32Nx_MAT1ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>T32Nx_MAT2ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>T32Nx_MAT3ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>T32Nx_MAT0Out0Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>T32Nx_MAT1Out0Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>T32Nx_MAT2Out1Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>T32Nx_MAT3Out1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>T32Nx_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>T32Nx_SetCNT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[155]"></a>T32Nx_SetPREMAT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>T32Nx_SetPRECNT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>T32Nx_SetMAT0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>T32Nx_SetMAT1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>T32Nx_SetMAT2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>T32Nx_SetMAT3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>T32Nx_GetMAT0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>T32Nx_GetMAT1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>T32Nx_GetMAT2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>T32Nx_GetMAT3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>T32Nx_GetCNT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>T32Nx_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>T32Nx_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>T32Nx_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>T32Nx_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>BUZC_Frequence</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lib_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4a]"></a>UART_Init</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, lib_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_Init &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[164]"></a>UART_AutoBaudConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>UART_BaudFreeConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>UART_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeforeTransparentTrans
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothCmdState
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1TxStart
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[9c]"></a>UART_TBIMConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[9d]"></a>UART_RBIMConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RBIMConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[a2]"></a>UART_SendByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[166]"></a>UART_SendHalfWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>UART_SendWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>UART_RecByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>UART_RecHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>UART_RecWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>UART_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>UART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>UART_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>WDT_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lib_wdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtInit
</UL>

<P><STRONG><a name="[16c]"></a>WDT_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_wdt.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>WDT_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_wdt.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>WDT_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_wdt.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>ISR_CH2ORevDeal</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISR_CH2ORevDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>FucCheckSum</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FucCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2OProcess
</UL>

<P><STRONG><a name="[53]"></a>CH2OProcess</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, ch2o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CH2OProcess &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FucCheckSum
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1]"></a>NMI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>T16N2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, irqhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = T16N2_IRQHandler &rArr; ISR_Timer1MsProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>KINT_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, irqhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KINT_IRQHandler &rArr; KINT_GetITFlag &rArr; KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetITFlag
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_ClearITFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>readKey</STRONG> (Thumb, 486 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = readKey &rArr; displayInit &rArr; TM1680Init &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceFeedback
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnJudge
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
</UL>

<P><STRONG><a name="[5c]"></a>keyProcess</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = keyProcess &rArr; readKey &rArr; displayInit &rArr; TM1680Init &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOffProcess
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets20MsFlag
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5f]"></a>PowerDealInMain</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PowerDealInMain &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceFeedback
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoInMain
</UL>

<P><STRONG><a name="[60]"></a>sensorPowerControl</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sensorPowerControl &rArr; Uart1ChannelSwitch &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1ChannelSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoInMain
</UL>

<P><STRONG><a name="[62]"></a>DoInMain</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DoInMain &rArr; sensorPowerControl &rArr; Uart1ChannelSwitch &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets500MsFlag
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorPowerControl
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDealInMain
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>SysInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SysInit &rArr; Handle_EEprom &rArr; sub_X24C0X_Read &rArr; IICReadByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tempAndHumidityInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_EEprom
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUARTInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6b]"></a>T16N2Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = T16N2Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_Enable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetMAT0
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetCNT0
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_ITConfig
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT0ITConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_BaseInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>McuIoInit</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = McuIoInit &rArr; bluetoothIOinit &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothIOinit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT_IO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSC2725_IO_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EG2805_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>DeviceClockEnable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; TempAndHumiControl &rArr; TempAndHumiOneShotRead &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2OProcess
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEg2805EE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterTestInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothProcess
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryDectect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryChargingInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryCharging
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProcess
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestControl
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiControl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM25Process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedAllOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedAllOff
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromRecord
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceClockEnable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoInMain
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[89]"></a>WdtInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[5e]"></a>powerOffProcess</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
</UL>

<P><STRONG><a name="[59]"></a>PowerOnJudge</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
</UL>

<P><STRONG><a name="[8a]"></a>testOut</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>

<P><STRONG><a name="[16f]"></a>delay_ms</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>MainMs</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[52]"></a>ZeroSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pm25.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_CH2ORevDeal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_PM25RevDeal
</UL>

<P><STRONG><a name="[8b]"></a>ISR_PM25RevDeal</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, pm25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISR_PM25RevDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZeroSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>PM25Process</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, pm25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PM25Process &rArr; GPIO_SetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>PSC2725_IO_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, psc2725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PSC2725_IO_Init &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
</UL>

<P><STRONG><a name="[8c]"></a>PSC2725RegConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, psc2725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PSC2725RegConfig &rArr; IICWrite &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryChargingInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryCharging
</UL>

<P><STRONG><a name="[79]"></a>batteryChargingInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, psc2725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = batteryChargingInit &rArr; PSC2725RegConfig &rArr; IICWrite &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSC2725RegConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryCharging
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>batteryChargeMs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, psc2725.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[80]"></a>batteryCharging</STRONG> (Thumb, 398 bytes, Stack size 8 bytes, psc2725.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = batteryCharging &rArr; batteryChargingInit &rArr; PSC2725RegConfig &rArr; IICWrite &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSC2725RegConfig
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryChargingInit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>Init_Timer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[57]"></a>ISR_Timer1MsProcess</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISR_Timer1MsProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayTimerMs
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRxMonitor
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Ms
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0TimerMs
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eg2805Ms
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromTimerMs
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryChargeMs
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMs
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>ISR_Timer100UsProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>TimerProcess</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimerProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Timer1S
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Timer500Ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Timer100Ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Timer20Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>API_Gets20MsFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyProcess
</UL>

<P><STRONG><a name="[f2]"></a>API_Gets100MsFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBattery
</UL>

<P><STRONG><a name="[63]"></a>API_Gets500MsFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoInMain
</UL>

<P><STRONG><a name="[56]"></a>API_Gets1SFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2OProcess
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selfCheckDisplay
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSendJudge
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testDeal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selfCheck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryDectect
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiControl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM25Process
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDealInMain
</UL>

<P><STRONG><a name="[9b]"></a>UART0Init</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uart0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART0Init &rArr; UART_Init &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBIMConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TBIMConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothInit
</UL>

<P><STRONG><a name="[9f]"></a>Uart1TxStart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart1TxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1ChannelSwitch
</UL>

<P><STRONG><a name="[61]"></a>Uart1ChannelSwitch</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Uart1ChannelSwitch &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1TxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorPowerControl
</UL>

<P><STRONG><a name="[69]"></a>UART1Init</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART1Init &rArr; UART_Init &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBIMConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TBIMConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1ChannelSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler &rArr; ISR_CH2ORevDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_CH2ORevDeal
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_PM25RevDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>Uart1Ms</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[7a]"></a>TestInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TestInit &rArr; GPIO_ReadBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>selfCheck</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = selfCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestControl
</UL>

<P><STRONG><a name="[a5]"></a>testDeal</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = testDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestControl
</UL>

<P><STRONG><a name="[87]"></a>TestControl</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TestControl &rArr; GPIO_ReadBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testDeal
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selfCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>enterTestInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = enterTestInit &rArr; bluetoothArouse &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTryTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothArouse
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>enterSelfCheckInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = enterSelfCheckInit &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTryTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothArouse
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandByte
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyBoxVoiceProcess
</UL>

<P><STRONG><a name="[77]"></a>EG2805_IO_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eg2805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EG2805_IO_Init &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
</UL>

<P><STRONG><a name="[ac]"></a>RamIncrementalRead</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, eg2805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RamIncrementalRead &rArr; IICWriteByte &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrent
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryDectect
</UL>

<P><STRONG><a name="[b3]"></a>EEIncrementalRead</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, eg2805.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendAck
</UL>

<P><STRONG><a name="[b4]"></a>Reg_read_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eg2805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reg_read_byte &rArr; IICWriteByte &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_write_byte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EG2805_EE_ReadByte
</UL>

<P><STRONG><a name="[b5]"></a>Reg_write_byte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, eg2805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Reg_write_byte &rArr; IICWriteByte &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_write_byte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EG2805_EE_ReadByte
</UL>

<P><STRONG><a name="[b6]"></a>EG2805_EE_ReadByte</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, eg2805.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_write_byte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_0A
</UL>

<P><STRONG><a name="[b7]"></a>EEPROM_write_byte</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, eg2805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EEPROM_write_byte &rArr; Reg_write_byte &rArr; IICWriteByte &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_write_byte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_0A
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEg2805EE
</UL>

<P><STRONG><a name="[85]"></a>batteryDectect</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, eg2805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = batteryDectect &rArr; RamIncrementalRead &rArr; IICWriteByte &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamIncrementalRead
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>Eg2805Ms</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, eg2805.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[b9]"></a>ReadCurrent</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, eg2805.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamIncrementalRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cal_0A
</UL>

<P><STRONG><a name="[ba]"></a>Cal_0A</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, eg2805.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrent
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_write_byte
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EG2805_EE_ReadByte
</UL>

<P><STRONG><a name="[7b]"></a>writeEg2805EE</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, eg2805.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = writeEg2805EE &rArr; EEPROM_write_byte &rArr; Reg_write_byte &rArr; IICWriteByte &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>Delay_300us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeforeTransparentTrans
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothCmdState
</UL>

<P><STRONG><a name="[bb]"></a>setBluetoothCmdState</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setBluetoothCmdState &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_300us
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBluetoothBroadcastInterval
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBluetoothReset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBluetoothPeripheralRole
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBluetoothBroadcastInterval
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBluetoothRole
</UL>

<P><STRONG><a name="[bd]"></a>setBluetoothTransparentTransState</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setBluetoothTransparentTransState &rArr; GPIO_SetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
</UL>

<P><STRONG><a name="[be]"></a>BeforeTransparentTrans</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BeforeTransparentTrans &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_300us
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUnitType
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ackUnit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensor
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoice
</UL>

<P><STRONG><a name="[bf]"></a>ReadBluetoothRole</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReadBluetoothRole &rArr; setBluetoothCmdState &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothCmdState
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
</UL>

<P><STRONG><a name="[c0]"></a>ReadBluetoothBroadcastInterval</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ReadBluetoothBroadcastInterval &rArr; setBluetoothCmdState &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothCmdState
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
</UL>

<P><STRONG><a name="[c1]"></a>SetBluetoothPeripheralRole</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetBluetoothPeripheralRole &rArr; setBluetoothCmdState &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothCmdState
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
</UL>

<P><STRONG><a name="[c2]"></a>SetBluetoothReset</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetBluetoothReset &rArr; setBluetoothCmdState &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothCmdState
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
</UL>

<P><STRONG><a name="[c3]"></a>SetBluetoothBroadcastInterval</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SetBluetoothBroadcastInterval &rArr; setBluetoothCmdState &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothCmdState
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
</UL>

<P><STRONG><a name="[c4]"></a>StrToHex</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>

<P><STRONG><a name="[c6]"></a>StrSearch</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = StrSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrGetValueWithHead
</UL>

<P><STRONG><a name="[c8]"></a>StrGetValue</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[c9]"></a>StrGetValueWithHead</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, bluetooth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrSearch
</UL>

<P><STRONG><a name="[d3]"></a>StrCopyValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StrCopyValue
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
</UL>

<P><STRONG><a name="[ca]"></a>ISR_bluetoothRevDeal</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART0_IRQHandler &rArr; GPIO_SetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecByte
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_bluetoothRevDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>bluetoothIOinit</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bluetoothIOinit &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
</UL>

<P><STRONG><a name="[cb]"></a>bluetoothSleep</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bluetoothSleep &rArr; GPIO_SetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothProcess
</UL>

<P><STRONG><a name="[a6]"></a>bluetoothArouse</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bluetoothArouse &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSelfCheckInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterTestInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothProcess
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothInit
</UL>

<P><STRONG><a name="[a7]"></a>defaultTryTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSendJudge
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSelfCheckInit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterTestInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothInit
</UL>

<P><STRONG><a name="[68]"></a>bluetoothInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bluetoothInit &rArr; UART0Init &rArr; UART_Init &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTryTime
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothArouse
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[cc]"></a>readBluetoothConnectState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readBluetoothConnectState &rArr; GPIO_ReadBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothProcess
</UL>

<P><STRONG><a name="[d1]"></a>resetTryTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceSend2UnitFrame
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
</UL>

<P><STRONG><a name="[8f]"></a>Uart0TimerMs</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[d2]"></a>setStatIdle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
</UL>

<P><STRONG><a name="[ce]"></a>bluetoothSetSendFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceSend2UnitFrame
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSendJudge
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransRev
</UL>

<P><STRONG><a name="[cd]"></a>BluetoothTransRev</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BluetoothTransRev &rArr; VoiceFeedBackPurifier &rArr; Send2VoiceFeedback &rArr; Euart1TxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFeedBackPurifier
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSetSendFlag
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceFeedback
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
</UL>

<P><STRONG><a name="[d0]"></a>bluetoothReceiveDeal</STRONG> (Thumb, 590 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bluetoothReceiveDeal &rArr; BluetoothTransRev &rArr; VoiceFeedBackPurifier &rArr; Send2VoiceFeedback &rArr; Euart1TxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransRev
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSetSendFlag
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setStatIdle
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTryTime
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrCopyValue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrSearch
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBluetoothTransparentTransState
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTryTime
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothProcess
</UL>

<P><STRONG><a name="[d4]"></a>BtSendJudge</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BtSendJudge &rArr; Send2VoiceFeedback &rArr; Euart1TxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSetSendFlag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultTryTime
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceFeedback
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
</UL>

<P><STRONG><a name="[da]"></a>resetUnitAckTime</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceSend2UnitFrame
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransSend
</UL>

<P><STRONG><a name="[d5]"></a>sendVoice</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sendVoice &rArr; BeforeTransparentTrans &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeforeTransparentTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransSend
</UL>

<P><STRONG><a name="[db]"></a>clearUnitAckTime</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluetooth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransSend
</UL>

<P><STRONG><a name="[d6]"></a>sendSensor</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sendSensor &rArr; BeforeTransparentTrans &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeforeTransparentTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransSend
</UL>

<P><STRONG><a name="[d7]"></a>ackUnit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ackUnit &rArr; BeforeTransparentTrans &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeforeTransparentTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransSend
</UL>

<P><STRONG><a name="[d8]"></a>getUnitType</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = getUnitType &rArr; BeforeTransparentTrans &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BeforeTransparentTrans
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransSend
</UL>

<P><STRONG><a name="[d9]"></a>BluetoothTransSend</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BluetoothTransSend &rArr; sendSensor &rArr; BeforeTransparentTrans &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUnitType
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ackUnit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensor
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearUnitAckTime
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendVoice
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetUnitAckTime
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
</UL>

<P><STRONG><a name="[dc]"></a>bluetoothSendDeal</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bluetoothSendDeal &rArr; BluetoothTransSend &rArr; sendSensor &rArr; BeforeTransparentTrans &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransSend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSendJudge
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBluetoothBroadcastInterval
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBluetoothReset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBluetoothPeripheralRole
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBluetoothBroadcastInterval
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBluetoothRole
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothProcess
</UL>

<P><STRONG><a name="[84]"></a>bluetoothProcess</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bluetoothProcess &rArr; bluetoothSendDeal &rArr; BluetoothTransSend &rArr; sendSensor &rArr; BeforeTransparentTrans &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readBluetoothConnectState
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSleep
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothArouse
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>VoiceSend2UnitFrame</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, bluetooth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VoiceSend2UnitFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetUnitAckTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSetSendFlag
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTryTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceivePurifier
</UL>

<P><STRONG><a name="[6a]"></a>EUARTInit</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, euart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EUARTInit &rArr; EUART_Init &rArr; EUART_BaudConfig &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_RBIMConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_TBIMConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_ITConfig
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_ModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[e2]"></a>Euart1TxStart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Euart1TxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceAirQua
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAck2Voice
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceFeedback
</UL>

<P><STRONG><a name="[5b]"></a>Send2VoiceFeedback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Send2VoiceFeedback &rArr; Euart1TxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euart1TxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceivePurifier
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyBoxVoiceProcess
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFeedBackPurifier
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BtSendJudge
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransRev
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerDealInMain
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
</UL>

<P><STRONG><a name="[e3]"></a>SendAck2Voice</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SendAck2Voice &rArr; Euart1TxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euart1TxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceivePurifier
</UL>

<P><STRONG><a name="[e4]"></a>Send2VoiceAirQua</STRONG> (Thumb, 468 bytes, Stack size 32 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Send2VoiceAirQua &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Euart1TxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyBoxVoiceProcess
</UL>

<P><STRONG><a name="[e5]"></a>OnlyBoxVoiceProcess</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OnlyBoxVoiceProcess &rArr; enterSelfCheckInit &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringVoiceProcess
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceAirQua
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSelfCheckInit
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceFeedback
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceivePurifier
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice
</UL>

<P><STRONG><a name="[e7]"></a>VoiceReceivePurifier</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = VoiceReceivePurifier &rArr; OnlyBoxVoiceProcess &rArr; enterSelfCheckInit &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringVoiceProcess
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyBoxVoiceProcess
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendAck2Voice
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceSend2UnitFrame
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceFeedback
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceiveFreshair
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice
</UL>

<P><STRONG><a name="[e8]"></a>VoiceReceiveFreshair</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VoiceReceiveFreshair &rArr; VoiceReceivePurifier &rArr; OnlyBoxVoiceProcess &rArr; enterSelfCheckInit &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceivePurifier
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;voice
</UL>

<P><STRONG><a name="[cf]"></a>VoiceFeedBackPurifier</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VoiceFeedBackPurifier &rArr; Send2VoiceFeedback &rArr; Euart1TxStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceFeedback
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BluetoothTransRev
</UL>

<P><STRONG><a name="[86]"></a>voice</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = voice &rArr; VoiceReceiveFreshair &rArr; VoiceReceivePurifier &rArr; OnlyBoxVoiceProcess &rArr; enterSelfCheckInit &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceiveFreshair
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceivePurifier
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyBoxVoiceProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>EUART0_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, voice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EUART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_RecByte
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_SendByte
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_GetITStatus
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_GetFlagStatus
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[171]"></a>UART1_TX_Stop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, voice.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>UartRxMonitor</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, voice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[ed]"></a>fillPM25</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fillPM25 &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[ee]"></a>fillCH2O</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fillCH2O &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[ef]"></a>fillTempratureOfGeneral</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fillTempratureOfGeneral &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[f0]"></a>fillHumidityOfGeneral</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fillHumidityOfGeneral &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[f1]"></a>fillBattery</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fillBattery
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets100MsFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnProcess
</UL>

<P><STRONG><a name="[fc]"></a>fillBluetooth</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ledtm1680.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnProcess
</UL>

<P><STRONG><a name="[f3]"></a>fillBattPercent</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fillBattPercent &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selfCheckDisplay
</UL>

<P><STRONG><a name="[f4]"></a>ring</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ring
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[e6]"></a>ringVoiceProcess</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ledtm1680.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceivePurifier
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyBoxVoiceProcess
</UL>

<P><STRONG><a name="[f6]"></a>fillTempratureOfPurifier</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fillTempratureOfPurifier &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[f7]"></a>fillHumidityOfPurifier</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fillHumidityOfPurifier &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[a9]"></a>SendCommandByte</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1680Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enterSelfCheckInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[f9]"></a>sendDisplayData</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sendDisplayData &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selfCheckDisplay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnProcess
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedAllOn
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedAllOff
</UL>

<P><STRONG><a name="[fa]"></a>TM1680Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TM1680Init &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
</UL>

<P><STRONG><a name="[7c]"></a>LedAllOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LedAllOn &rArr; sendDisplayData &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>LedAllOff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LedAllOff &rArr; sendDisplayData &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selfCheckDisplay
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>LedOnProcess</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LedOnProcess &rArr; sendDisplayData &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBluetooth
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[fd]"></a>LedOffProcess</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LedOffProcess &rArr; sendDisplayData &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBluetooth
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[5a]"></a>displayInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = displayInit &rArr; TM1680Init &rArr; SendCommandByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TM1680Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
</UL>

<P><STRONG><a name="[90]"></a>displayTimerMs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ledtm1680.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[fe]"></a>selfCheckDisplay</STRONG> (Thumb, 628 bytes, Stack size 16 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = selfCheckDisplay &rArr; LedAllOff &rArr; sendDisplayData &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBattPercent
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedAllOff
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[82]"></a>display</STRONG> (Thumb, 426 bytes, Stack size 8 bytes, ledtm1680.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = display &rArr; selfCheckDisplay &rArr; LedAllOff &rArr; sendDisplayData &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;selfCheckDisplay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffProcess
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnProcess
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillHumidityOfPurifier
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillTempratureOfPurifier
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillHumidityOfGeneral
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillTempratureOfGeneral
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillCH2O
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillPM25
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandByte
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets500MsFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>EE_I2C_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>

<P><STRONG><a name="[100]"></a>sub_X24C0X_Read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sub_X24C0X_Read &rArr; IICReadByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_EEprom
</UL>

<P><STRONG><a name="[101]"></a>RecordByteData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RecordByteData &rArr; IICWrite &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEpromRecord
</UL>

<P><STRONG><a name="[67]"></a>Handle_EEprom</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Handle_EEprom &rArr; sub_X24C0X_Read &rArr; IICReadByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_X24C0X_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[88]"></a>EEpromRecord</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, ee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = EEpromRecord &rArr; RecordByteData &rArr; IICWrite &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordByteData
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>EEpromTimerMs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[103]"></a>delay1us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, commiic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendNack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendAck
</UL>

<P><STRONG><a name="[ab]"></a>SdaHigh</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendNack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_I2C_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EG2805_IO_Init
</UL>

<P><STRONG><a name="[102]"></a>SdaLow</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendAck
</UL>

<P><STRONG><a name="[aa]"></a>SclHigh</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SclHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendNack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_I2C_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendAck
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EG2805_IO_Init
</UL>

<P><STRONG><a name="[af]"></a>SclLow</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SclLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendNack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendAck
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_read_byte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEIncrementalRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamIncrementalRead
</UL>

<P><STRONG><a name="[ad]"></a>IICStart</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IICStart &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaLow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_write_byte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_read_byte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEIncrementalRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamIncrementalRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandByte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
</UL>

<P><STRONG><a name="[b2]"></a>IICStop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IICStop &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaLow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_write_byte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_read_byte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEIncrementalRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamIncrementalRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandByte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
</UL>

<P><STRONG><a name="[104]"></a>IICSdaSetInput</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IICSdaSetInput &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
</UL>

<P><STRONG><a name="[105]"></a>IICSdaSetOutput</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IICSdaSetOutput &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
</UL>

<P><STRONG><a name="[f8]"></a>IICWaitAck</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSdaSetOutput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSdaSetInput
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandByte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
</UL>

<P><STRONG><a name="[b1]"></a>IICMasterSendAck</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IICMasterSendAck &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaLow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEIncrementalRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamIncrementalRead
</UL>

<P><STRONG><a name="[106]"></a>IICMasterSendNack</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IICMasterSendNack &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
</UL>

<P><STRONG><a name="[ae]"></a>IICWriteByte</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IICWriteByte &rArr; SdaLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSdaSetOutput
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaLow
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotSet
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendDisplayData
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_write_byte
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_read_byte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEIncrementalRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamIncrementalRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCommandByte
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
</UL>

<P><STRONG><a name="[b0]"></a>IICReadSdaIO</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IICReadSdaIO &rArr; SclLow &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSdaSetOutput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSdaSetInput
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1us
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reg_read_byte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEIncrementalRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RamIncrementalRead
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
</UL>

<P><STRONG><a name="[8e]"></a>IICReadByte</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IICReadByte &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_X24C0X_Read
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryCharging
</UL>

<P><STRONG><a name="[8d]"></a>IICWrite</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, commiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IICWrite &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordByteData
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSC2725RegConfig
</UL>

<P><STRONG><a name="[75]"></a>SHT_IO_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tempandhumi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SHT_IO_Init &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
</UL>

<P><STRONG><a name="[66]"></a>tempAndHumidityInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tempandhumi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[107]"></a>TempAndHumiOneShotSet</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tempandhumi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TempAndHumiOneShotSet &rArr; IICWaitAck &rArr; SdaHigh &rArr; GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiControl
</UL>

<P><STRONG><a name="[108]"></a>TempAndHumiOneShotRead</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, tempandhumi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TempAndHumiOneShotRead &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendNack
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWriteByte
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICStart
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICMasterSendAck
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiControl
</UL>

<P><STRONG><a name="[10c]"></a>TempAndHumiTimerS</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tempandhumi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiControl
</UL>

<P><STRONG><a name="[7f]"></a>TempAndHumiControl</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tempandhumi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TempAndHumiControl &rArr; TempAndHumiOneShotRead &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiTimerS
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotSet
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZC_Frequence
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_BaudConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillHumidityOfPurifier
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillTempratureOfPurifier
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillBattPercent
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillHumidityOfGeneral
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillTempratureOfGeneral
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillCH2O
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillPM25
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryDectect
</UL>

<P><STRONG><a name="[c5]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrToHex
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrGetValue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StrSearch
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillCH2O
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
</UL>

<P><STRONG><a name="[113]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2OProcess
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2OProcess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZC_Frequence
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_f2iz</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_f2uiz</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZC_Frequence
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillCH2O
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2OProcess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CH2OProcess
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TempAndHumiOneShotRead
</UL>

<P><STRONG><a name="[10f]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[177]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[178]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[114]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[112]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[111]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17a]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[17b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lib_gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetSelxIndexFromPin
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetTriggerStyleFromPin
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetSELxIndexFromPin
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetTriggerStyleFromPin
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFuncxRegFromPin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSdaSetOutput
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICSdaSetInput
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaLow
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWaitAck
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceReceivePurifier
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnlyBoxVoiceProcess
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send2VoiceAirQua
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoiceFeedBackPurifier
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothSendDeal
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bluetoothReceiveDeal
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdaHigh
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclLow
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SclHigh
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadSdaIO
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICWrite
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICReadByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[17e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[17f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[180]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[97]"></a>sub_Timer20Ms</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProcess
</UL>

<P><STRONG><a name="[98]"></a>sub_Timer100Ms</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProcess
</UL>

<P><STRONG><a name="[99]"></a>sub_Timer500Ms</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProcess
</UL>

<P><STRONG><a name="[9a]"></a>sub_Timer1S</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerProcess
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
