<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\BS45i.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\BS45i.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.02 [Build 28]: Last Updated: Sat Nov 30 09:09:47 2019
<BR><P>
<H3>Maximum Stack Usage =        252 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; WiFi_Deal &rArr; wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_switch_handle &rArr; powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[16]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1f]">CCM_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1b]">EUART0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[2]">HardFault_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1e]">I2C0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[15]">KINT_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[17]">LVD_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1]">NMI_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[6]">PINT0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[7]">PINT1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[8]">PINT2_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[9]">PINT3_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[a]">PINT4_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[b]">PINT5_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[c]">PINT6_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[d]">PINT7_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[18]">PLLLK_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[4]">PendSV_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[14]">RTC_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[21]">RegInit</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[0]">Reset_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1c]">SPI0_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1d]">SPI1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[3]">SVC_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[5]">SysTick_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[22]">SystemInit</a> from system_hr8p506.o(.text) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[e]">T16N0_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[f]">T16N1_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[10]">T16N2_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[11]">T16N3_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[12]">T32N0_IRQHandler</a> from dcmotordrv.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[19]">UART0_IRQHandler</a> from irqhandler.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[1a]">UART1_IRQHandler</a> from pm25.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[13]">WDT_IRQHandler</a> from startup_hr8p506.o(.text) referenced from startup_hr8p506.o(RESET)
 <LI><a href="#[23]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hr8p506.o(.text)
 <LI><a href="#[20]">main</a> from main.o(.text) referenced from entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[24]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[154]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[156]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[157]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8.o(.ARM.Collect$$$$00000009))

<P><STRONG><a name="[0]"></a>Reset_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CCM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PLLLK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>T16N1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>T16N3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RegInit</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, startup_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(.text)
</UL>
<P><STRONG><a name="[22]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_hr8p506.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>IAP_PageErase</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hr8p506_iap_table.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>IAP_WordProgram</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, hr8p506_iap_table.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>IAP_PageProgram</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, hr8p506_iap_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IAP_PageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
</UL>

<P><STRONG><a name="[96]"></a>IAPRead</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hr8p506_iap_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAPRead
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
</UL>

<P><STRONG><a name="[27]"></a>ADC_Reset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lib_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[26]"></a>ADC_Init</STRONG> (Thumb, 252 bytes, Stack size 4 bytes, lib_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInitALL
</UL>

<P><STRONG><a name="[15a]"></a>ADC_ACPConfig</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, lib_adc.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>ADC_Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AD_Value
</UL>

<P><STRONG><a name="[15b]"></a>ADC_SoftStart</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib_adc.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>ADC_SoftStop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lib_adc.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>ADC_GetConvValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AD_Value
</UL>

<P><STRONG><a name="[15d]"></a>ADC_GetConvStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_adc.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>ADC_GetACPMeanValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib_adc.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>ADC_GetIFStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AD_Value
</UL>

<P><STRONG><a name="[15f]"></a>ADC_GetIEStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_adc.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>ADC_ClearIFStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AD_Value
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adSample
</UL>

<P><STRONG><a name="[160]"></a>EUART_ModeConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>EUART_BaudConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lib_euart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;U7816_Init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_Init
</UL>

<P><STRONG><a name="[2a]"></a>EUART_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lib_euart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_BaudConfig
</UL>

<P><STRONG><a name="[e6]"></a>EUART_ITConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_TX_Start
</UL>

<P><STRONG><a name="[161]"></a>EUART_TBIMConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>EUART_RBIMConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>EUART_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>EUART_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>EUART_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>U7816_Init</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lib_euart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_BaudConfig
</UL>

<P><STRONG><a name="[166]"></a>EUART_EIOChConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>EUART_EIODirection</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>EUART_SendByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>EUART_SendHalfWord</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>EUART_SendWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>EUART_RecByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>EUART_RecHalfWord</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>EUART_RecWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_euart.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>GPIO_SetFuncxRegFromPin</STRONG> (Thumb, 1394 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetFuncxRegFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[2e]"></a>GPIO_GetNormalBitOffsetFromPin</STRONG> (Thumb, 250 bytes, Stack size 4 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSingalTypeFromPin
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPDERegFromPin
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPUERegFromPin
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDSRegFromPin
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetODERegFromPin
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDirRegFromPin
</UL>

<P><STRONG><a name="[2f]"></a>GPIO_SetDirRegFromPin</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDirRegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[30]"></a>GPIO_SetODERegFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetODERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[31]"></a>GPIO_SetDSRegFromPin</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetDSRegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[32]"></a>GPIO_SetPUERegFromPin</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPUERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[33]"></a>GPIO_SetPDERegFromPin</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetPDERegFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[34]"></a>GPIO_SetSingalTypeFromPin</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[35]"></a>GPIO_Init</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetSingalTypeFromPin
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPDERegFromPin
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPUERegFromPin
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDSRegFromPin
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetODERegFromPin
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDirRegFromPin
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFuncxRegFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInitALL
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Pwm_Off
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[36]"></a>GPIO_ReadBit</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_ReadBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IORead_Test
</UL>

<P><STRONG><a name="[37]"></a>GPIO_WriteBit</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_WriteBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Pwm_Off
</UL>

<P><STRONG><a name="[38]"></a>GPIO_SetBit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_BuzV
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_BuzF
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBProcess
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_DCDrv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_Ionizer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM25Deal
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_RGB
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDeal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623STB
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623DATA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623CLK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotoPower
</UL>

<P><STRONG><a name="[39]"></a>GPIO_ResetBit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_BuzV
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_BuzF
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBProcess
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_DCDrv
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_Ionizer
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM25Deal
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_RGB
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffDeal
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623STB
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623DATA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623CLK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotoPower
</UL>

<P><STRONG><a name="[3a]"></a>GPIO_ToggleBit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
</UL>

<P><STRONG><a name="[3b]"></a>PINT_GetPINTxIndexFromPin</STRONG> (Thumb, 174 bytes, Stack size 4 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetITFlag
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_ClearITFlag
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetEnableOrNotFromPin
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetTriggerStyleFromPin
</UL>

<P><STRONG><a name="[3c]"></a>PINT_SetTriggerStyleFromPin</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>

<P><STRONG><a name="[3d]"></a>PINT_GetSELxIndexFromPin</STRONG> (Thumb, 170 bytes, Stack size 4 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetEnableOrNotFromPin
</UL>

<P><STRONG><a name="[3e]"></a>PINT_SetEnableOrNotFromPin</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetSELxIndexFromPin
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_Init
</UL>

<P><STRONG><a name="[3f]"></a>PINT_Init</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetEnableOrNotFromPin
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetTriggerStyleFromPin
</UL>

<P><STRONG><a name="[40]"></a>PINT_ClearITFlag</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
</UL>

<P><STRONG><a name="[41]"></a>PINT_GetITFlag</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
</UL>

<P><STRONG><a name="[42]"></a>KINT_GetKINTxIndexFromPin</STRONG> (Thumb, 174 bytes, Stack size 4 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetITFlag
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_ClearITFlag
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetEnableOrNotFromPin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetTriggerStyleFromPin
</UL>

<P><STRONG><a name="[43]"></a>KINT_SetTriggerStyleFromPin</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KINT_SetTriggerStyleFromPin &rArr; KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_Init
</UL>

<P><STRONG><a name="[44]"></a>KINT_GetSelxIndexFromPin</STRONG> (Thumb, 170 bytes, Stack size 4 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KINT_GetSelxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetEnableOrNotFromPin
</UL>

<P><STRONG><a name="[45]"></a>KINT_SetEnableOrNotFromPin</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KINT_SetEnableOrNotFromPin &rArr; KINT_GetSelxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetSelxIndexFromPin
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_Init
</UL>

<P><STRONG><a name="[46]"></a>KINT_Init</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = KINT_Init &rArr; KINT_SetEnableOrNotFromPin &rArr; KINT_GetSelxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetEnableOrNotFromPin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetTriggerStyleFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
</UL>

<P><STRONG><a name="[47]"></a>KINT_ClearITFlag</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KINT_ClearITFlag &rArr; KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>KINT_GetITFlag</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lib_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KINT_GetITFlag &rArr; KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>GPIO_TX0Config</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, lib_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>GPIO_TX1Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lib_gpio.o(.text), UNUSED)

<P><STRONG><a name="[74]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, lib_scs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[170]"></a>SCB_SystemLPConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lib_scs.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>SCB_GetCpuID</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_scs.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>SysTick_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lib_scs.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>T16Nx_BaseInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0Init
</UL>

<P><STRONG><a name="[173]"></a>T16Nx_CapInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>T16Nx_PMWOutInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_PMWOutInit
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
</UL>

<P><STRONG><a name="[174]"></a>T16Nx_PWMPDZ_Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>T16Nx_MAT0ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_MAT0ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0Init
</UL>

<P><STRONG><a name="[5c]"></a>T16Nx_MAT1ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_MAT1ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
</UL>

<P><STRONG><a name="[175]"></a>T16Nx_MAT2ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>T16Nx_MAT3ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>T16Nx_MAT0Out0Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_MAT0Out0Config
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
</UL>

<P><STRONG><a name="[5d]"></a>T16Nx_MAT1Out0Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16Nx_MAT1Out0Config
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
</UL>

<P><STRONG><a name="[177]"></a>T16Nx_MAT2Out1Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>T16Nx_MAT3Out1Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>T16Nx_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0Init
</UL>

<P><STRONG><a name="[5e]"></a>T16Nx_SetCNT0</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0Init
</UL>

<P><STRONG><a name="[179]"></a>T16Nx_SetCNT1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>T16Nx_SetPREMAT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>T16Nx_SetPRECNT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>T16Nx_SetMAT0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_SetFreq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0Init
</UL>

<P><STRONG><a name="[62]"></a>T16Nx_SetMAT1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_SetFreq
</UL>

<P><STRONG><a name="[17c]"></a>T16Nx_SetMAT2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>T16Nx_SetMAT3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>T16Nx_SetTOP0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[17f]"></a>T16Nx_SetTOP1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>T16Nx_GetMAT0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>T16Nx_GetMAT1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>T16Nx_GetMAT2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>T16Nx_GetMAT3</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>T16Nx_GetTOP0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>T16Nx_GetTOP1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>T16Nx_GetCNT0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>T16Nx_GetCNT1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>T16Nx_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>T16Nx_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2_IRQHandler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0_IRQHandler
</UL>

<P><STRONG><a name="[5f]"></a>T16Nx_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0Init
</UL>

<P><STRONG><a name="[56]"></a>T16Nx_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_Stop
</UL>

<P><STRONG><a name="[188]"></a>T16Nx_PWMBK_Config</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>T16Nx_GetPWMBKF</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>T16Nx_ResetPWMBKF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>T16Nx_PTR_Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>T32Nx_BaseInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T32Nx_BaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[18c]"></a>T32Nx_CapInit</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>T32Nx_PMWOutInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T32Nx_PMWOutInit
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[18d]"></a>T32Nx_MAT0ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>T32Nx_MAT1ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>T32Nx_MAT2ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T32Nx_MAT2ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[6d]"></a>T32Nx_MAT3ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T32Nx_MAT3ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[18f]"></a>T32Nx_MAT0Out0Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>T32Nx_MAT1Out0Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>T32Nx_MAT2Out1Config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lib_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T32Nx_MAT2Out1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[6f]"></a>T32Nx_MAT3Out1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[73]"></a>T32Nx_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[70]"></a>T32Nx_SetCNT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[191]"></a>T32Nx_SetPREMAT</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>T32Nx_SetPRECNT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>T32Nx_SetMAT0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>T32Nx_SetMAT1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>T32Nx_SetMAT2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[72]"></a>T32Nx_SetMAT3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoPwmDutySet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[195]"></a>T32Nx_GetMAT0</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>T32Nx_GetMAT1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>T32Nx_GetMAT2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[198]"></a>T32Nx_GetMAT3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>T32Nx_GetCNT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_timer.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>T32Nx_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32N0_IRQHandler
</UL>

<P><STRONG><a name="[81]"></a>T32Nx_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32N0_IRQHandler
</UL>

<P><STRONG><a name="[75]"></a>T32Nx_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>

<P><STRONG><a name="[7a]"></a>T32Nx_Disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lib_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_MotorDrvStop
</UL>

<P><STRONG><a name="[49]"></a>BUZC_Frequence</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lib_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[4c]"></a>UART_Init</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, lib_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_Init &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[19a]"></a>UART_AutoBaudConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>UART_BaudFreeConfig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>UART_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[d1]"></a>UART_TBIMConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[d2]"></a>UART_RBIMConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lib_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RBIMConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
</UL>

<P><STRONG><a name="[133]"></a>UART_SendByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiSendByte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartPutChar
</UL>

<P><STRONG><a name="[19c]"></a>UART_SendHalfWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>UART_SendWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>UART_RecByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_UART_RX
</UL>

<P><STRONG><a name="[19e]"></a>UART_RecHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>UART_RecWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>UART_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_uart.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>UART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiSendByte
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartPutChar
</UL>

<P><STRONG><a name="[f4]"></a>UART_GetITStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiSendByte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartPutChar
</UL>

<P><STRONG><a name="[52]"></a>WDT_Init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lib_wdt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WdtInit
</UL>

<P><STRONG><a name="[1a1]"></a>WDT_SetReloadValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_wdt.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>WDT_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib_wdt.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>WDT_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lib_wdt.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>HW_Buzzer_Start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_Buzzer_Start &rArr; HW_IOSet_BuzF &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_BuzF
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerDeal
</UL>

<P><STRONG><a name="[55]"></a>HW_Buzzer_Stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HW_Buzzer_Stop &rArr; HW_IOSet_BuzF &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_BuzF
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Timer1Ms_Buzzer
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerDeal
</UL>

<P><STRONG><a name="[57]"></a>Init_Buzzer</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetCNT0
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT1Out0Config
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT0Out0Config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT1ITConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT0ITConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_PMWOutInit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_BaseInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_SetFreq
</UL>

<P><STRONG><a name="[64]"></a>sub_GetsTune</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, buzzer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerDeal
</UL>

<P><STRONG><a name="[63]"></a>buzzerDeal</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = buzzerDeal &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_GetsTune
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_Start
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[65]"></a>API_Buzzer_Set</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_GetsTune
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_Start
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_SetFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_anion_handle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_fan_speed_enum_handle
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSet
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockSet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factoryRecoverDis
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testIni
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_KeyInWifiCfgMode
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLockLongPress
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLockShortPress
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffDeal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDeal
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressing
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAuto
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFanLongPressed
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFan
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLightLongPressed
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLight
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFilterReset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFilter
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerLongPressed
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APISleepAwaken
</UL>

<P><STRONG><a name="[66]"></a>Api_Timer1Ms_Buzzer</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Api_Timer1Ms_Buzzer &rArr; HW_Buzzer_Stop &rArr; HW_IOSet_BuzF &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_BuzV
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[68]"></a>DCMotoPower</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DCMotoPower &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_DCMotorDrv
</UL>

<P><STRONG><a name="[69]"></a>T32NxInit</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = T32NxInit &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_Enable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_SetMAT3
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_SetMAT2
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_SetCNT
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_ITConfig
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_MAT3Out1Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_MAT2Out1Config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_MAT3ITConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_MAT2ITConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_PMWOutInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_BaseInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_MotorDrvStart
</UL>

<P><STRONG><a name="[76]"></a>MotoPwmDutySet</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotoPwmDutySet
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_SetMAT3
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_DCMotorDrv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_MotorDrvStart
</UL>

<P><STRONG><a name="[77]"></a>sub_MotorDrvStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sub_MotorDrvStart &rArr; T32NxInit &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoPwmDutySet
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32NxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_DCMotorDrv
</UL>

<P><STRONG><a name="[78]"></a>Fan_Pwm_Off</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Fan_Pwm_Off &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_MotorDrvStop
</UL>

<P><STRONG><a name="[79]"></a>sub_MotorDrvStop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sub_MotorDrvStop &rArr; Fan_Pwm_Off &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_Disable
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_Pwm_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_DCMotorDrv
</UL>

<P><STRONG><a name="[7d]"></a>sub_DCMotorErr</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, dcmotordrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_DCMotorSpeedCalc
</UL>

<P><STRONG><a name="[7b]"></a>sub_DCMotorSpeedCalc</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sub_DCMotorSpeedCalc &rArr; TjFanSpeed &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TjFanSpeed
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_DCMotorErr
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_DCMotorDrv
</UL>

<P><STRONG><a name="[7e]"></a>sub_DcMotorDrv_Timer</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub_DcMotorDrv_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_DCMotorDrv
</UL>

<P><STRONG><a name="[132]"></a>ISR_MOTO_FEEDFACK</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, dcmotordrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>Api_Timer100Us_DCMotorDrv</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dcmotordrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>T32N0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T32N0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_ClearITPendingBit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T32Nx_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>testFanIni</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dcmotordrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testIni
</UL>

<P><STRONG><a name="[87]"></a>sub_DCFanSet</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, dcmotordrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanDeal
</UL>

<P><STRONG><a name="[82]"></a>Handle_DCMotorDrv</STRONG> (Thumb, 530 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Handle_DCMotorDrv &rArr; sub_MotorDrvStart &rArr; T32NxInit &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fan_OFFctrl
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_DcMotorDrv_Timer
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_DCMotorSpeedCalc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_MotorDrvStop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_MotorDrvStart
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotoPwmDutySet
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCMotoPower
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanDeal
</UL>

<P><STRONG><a name="[84]"></a>fanAuto</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fanAuto &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_AutoFanSet
</UL>

<P><STRONG><a name="[85]"></a>sub_AutoFanSet</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sub_AutoFanSet &rArr; fanAuto &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanAuto
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAuto
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanDeal
</UL>

<P><STRONG><a name="[86]"></a>fanDeal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dcmotordrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = fanDeal &rArr; Handle_DCMotorDrv &rArr; sub_MotorDrvStart &rArr; T32NxInit &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_AutoFanSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_DCMotorDrv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_DCFanSet
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>sub_Delay_TM1623</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, drv_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub_Delay_TM1623
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOP_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubTm1623Drv
</UL>

<P><STRONG><a name="[8a]"></a>SubTm1623Drv</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, drv_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SubTm1623Drv &rArr; HW_IOSet_TM1623STB &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623STB
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623DATA
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_TM1623CLK
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Delay_TM1623
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_LEDScanDrv
</UL>

<P><STRONG><a name="[8e]"></a>Api_LEDScanDrv</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, drv_disp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Api_LEDScanDrv &rArr; SubTm1623Drv &rArr; HW_IOSet_TM1623STB &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubTm1623Drv
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTestMode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalDis
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factoryRecoverDis
</UL>

<P><STRONG><a name="[8f]"></a>CalFilterRecValEE</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CalFilterRecValEE &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFilterReset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerLongPressed
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFactoryDefault
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterLife
</UL>

<P><STRONG><a name="[90]"></a>filterPercentCal</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFilterReset
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerLongPressed
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFactoryDefault
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterLife
</UL>

<P><STRONG><a name="[93]"></a>filterLife</STRONG> (Thumb, 338 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = filterLife &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalFilterRecValEE
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeDeal
</UL>

<P><STRONG><a name="[95]"></a>iap_init</STRONG> (Thumb, 418 bytes, Stack size 40 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = iap_init &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAPRead
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_PageProgram
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalFilterRecValEE
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[9b]"></a>delay_ms</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, filter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[9a]"></a>FlashWrite</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FlashWrite &rArr; IAP_PageProgram
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAPRead
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_PageProgram
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Clr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeWhetherNeedWriteFlash
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>PowerOnDeal</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PowerOnDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerSet
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
</UL>

<P><STRONG><a name="[ad]"></a>PowerOffDeal</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOff
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerSet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTestMode
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
</UL>

<P><STRONG><a name="[b4]"></a>KeyAutoLongPressed</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyAutoLongPressed &rArr; WiFi_KeyInWifiCfgMode &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_KeyInWifiCfgMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[b6]"></a>KeyLockShortPress</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyLockShortPress &rArr; APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APISleepAwaken
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyReleased
</UL>

<P><STRONG><a name="[b7]"></a>KeyLockLongPress</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = KeyLockLongPress &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[bd]"></a>keyDeal</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = keyDeal &rArr; keyHoldDeal &rArr; KeyIonizerLongPressed &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimeCount
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyReleased
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readKey
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>Init_Disp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_Disp &rArr; HW_IOSet_RGB &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[ca]"></a>display</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = display &rArr; led &rArr; ledTestMode &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Deal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Disp_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>DeviceClockEnable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>McuIoInit</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = McuIoInit &rArr; KINT_Init &rArr; KINT_SetEnableOrNotFromPin &rArr; KINT_GetSelxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>WdtInit</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[cd]"></a>T16N0Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = T16N0Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_Enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetMAT0
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetCNT0
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_ITConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT0ITConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_BaseInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[cf]"></a>T16N2Init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = T16N2Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_Enable
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetMAT0
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetCNT0
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_ITConfig
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_MAT0ITConfig
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_BaseInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[d0]"></a>UART1Init</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART1Init &rArr; UART_Init &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBIMConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TBIMConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[d4]"></a>UART0Init</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = UART0Init &rArr; UART_Init &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RBIMConfig
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TBIMConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[d5]"></a>SysInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SysInit &rArr; iap_init &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInitALL
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N0Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Disp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Clr
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = main &rArr; WiFi_Deal &rArr; wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_switch_handle &rArr; powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerDeal
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDeal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeDeal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adSample
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM25Deal
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuIoInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceClockEnable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyDeal
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Clr
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanDeal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry8.o(.ARM.Collect$$$$00000009)
</UL>
<P><STRONG><a name="[9c]"></a>WDT_Clr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcudrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[67]"></a>HW_IOSet_BuzV</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcudrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_IOSet_BuzV &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Timer1Ms_Buzzer
</UL>

<P><STRONG><a name="[54]"></a>HW_IOSet_BuzF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcudrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_IOSet_BuzF &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_Stop
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Buzzer_Start
</UL>

<P><STRONG><a name="[e2]"></a>HW_IOSet_Ionizer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcudrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_IOSet_Ionizer &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Ionizer
</UL>

<P><STRONG><a name="[e3]"></a>HW_IOSet_DCDrv</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcudrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>

<P><STRONG><a name="[8c]"></a>HW_IOSet_TM1623CLK</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcudrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_IOSet_TM1623CLK &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubTm1623Drv
</UL>

<P><STRONG><a name="[8b]"></a>HW_IOSet_TM1623STB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcudrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_IOSet_TM1623STB &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubTm1623Drv
</UL>

<P><STRONG><a name="[8d]"></a>HW_IOSet_TM1623DATA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcudrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_IOSet_TM1623DATA &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SubTm1623Drv
</UL>

<P><STRONG><a name="[1a4]"></a>HW_ADC_GetsValue</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mcudrv.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>HW_IORead_Test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mcudrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HW_IORead_Test &rArr; GPIO_ReadBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test
</UL>

<P><STRONG><a name="[89]"></a>NOP_NOP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcudrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_RGB
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Delay_TM1623
</UL>

<P><STRONG><a name="[c9]"></a>HW_IOSet_RGB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mcudrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HW_IOSet_RGB &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Disp
</UL>

<P><STRONG><a name="[e5]"></a>WiFi_TX_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcudrv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_UartPutChar
</UL>

<P><STRONG><a name="[d8]"></a>Init_Mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[e7]"></a>sub_Ionizer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sub_Ionizer &rArr; HW_IOSet_Ionizer &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IOSet_Ionizer
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeDeal
</UL>

<P><STRONG><a name="[e8]"></a>sub_Mode_Light</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub_Mode_Light
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeDeal
</UL>

<P><STRONG><a name="[e9]"></a>sub_Mode_Timer</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sub_Mode_Timer
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets20MsFlag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeDeal
</UL>

<P><STRONG><a name="[de]"></a>modeDeal</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = modeDeal &rArr; filterLife &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mode_Timer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mode_Light
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Ionizer
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterLife
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>anionSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mode.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_anion_handle
</UL>

<P><STRONG><a name="[ea]"></a>powerSet</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffDeal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_switch_handle
</UL>

<P><STRONG><a name="[eb]"></a>lockSet</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lockSet &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_child_lock_handle
</UL>

<P><STRONG><a name="[ec]"></a>modeSet</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = modeSet &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOff
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_AutoFanSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[a0]"></a>JudgeRingColour</STRONG> (Thumb, 446 bytes, Stack size 8 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = JudgeRingColour &rArr; RGB_Red &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Red
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Pur
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Orange
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Green
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeUseWhichPM25Zone
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Blue
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOff
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Deal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factoryRecoverDis
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDeal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APISleepAwaken
</UL>

<P><STRONG><a name="[df]"></a>PM25Deal</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, pm25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PM25Deal &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>PM25Ms</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pm25.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[108]"></a>PM25Sec</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, pm25.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDeal
</UL>

<P><STRONG><a name="[1a]"></a>UART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, pm25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler &rArr; ISR_UART_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_UART_RX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>di</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rgb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBProcess
</UL>

<P><STRONG><a name="[f9]"></a>ei</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rgb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBProcess
</UL>

<P><STRONG><a name="[f6]"></a>delay_RGB</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_RGB
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOP_NOP
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBProcess
</UL>

<P><STRONG><a name="[f7]"></a>RGBProcess</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_RGB
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ei
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;di
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOn
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOff
</UL>

<P><STRONG><a name="[ae]"></a>RGBOff</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RGBOff &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Deal
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factoryRecoverDis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Disp_Timer
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffDeal
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
</UL>

<P><STRONG><a name="[fa]"></a>RGBOn</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Red
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Pur
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Orange
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Green
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Blue
</UL>

<P><STRONG><a name="[f1]"></a>RGB_Pur</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RGB_Pur &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOn
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testChangeRingColour
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
</UL>

<P><STRONG><a name="[f0]"></a>RGB_Red</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RGB_Red &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOn
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testChangeRingColour
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
</UL>

<P><STRONG><a name="[c6]"></a>RGB_Blue</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RGB_Blue &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOn
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testChangeRingColour
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDeal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
</UL>

<P><STRONG><a name="[ee]"></a>RGB_Green</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RGB_Green &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOn
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testChangeRingColour
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
</UL>

<P><STRONG><a name="[ef]"></a>RGB_Orange</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rgb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RGB_Orange &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOn
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testChangeRingColour
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
</UL>

<P><STRONG><a name="[fb]"></a>SetWiFiConfig</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SetWiFiConfig &rArr; mcu_set_wifi_mode &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testIni
</UL>

<P><STRONG><a name="[a7]"></a>testIni</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = testIni &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWiFiConfig
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testFanIni
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Test
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerFilter
</UL>

<P><STRONG><a name="[da]"></a>Init_Test</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Init_Test &rArr; testIni &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IORead_Test
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testIni
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[fd]"></a>testChangeRingColour</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = testChangeRingColour &rArr; RGB_Red &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Red
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Pur
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Orange
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Green
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Blue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
</UL>

<P><STRONG><a name="[fe]"></a>SetWiFiSelfcheck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SetWiFiSelfcheck &rArr; mcu_start_wifitest &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_start_wifitest
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
</UL>

<P><STRONG><a name="[100]"></a>testTimer</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = testTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
</UL>

<P><STRONG><a name="[e0]"></a>TestDeal</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = TestDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_wifi_work_state
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTimer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWiFiSelfcheck
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testChangeRingColour
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_IORead_Test
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets20MsFlag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>ledTestMode</STRONG> (Thumb, 670 bytes, Stack size 8 bytes, test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ledTestMode &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets20MsFlag
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffDeal
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_LEDScanDrv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[d7]"></a>Init_Timer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[102]"></a>ISR_Timer1MsProcess</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ISR_Timer1MsProcess &rArr; Api_Timer1Ms_Buzzer &rArr; HW_Buzzer_Stop &rArr; HW_IOSet_BuzF &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Timer1Ms_Buzzer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanMsDly
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM25Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16N2_IRQHandler
</UL>

<P><STRONG><a name="[7f]"></a>API_Gets1SFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testTimer
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testChangeRingColour
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mode_Timer
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mode_Light
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDeal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adSample
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTestMode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factoryRecoverDis
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Disp_Timer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimeCount
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterLife
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeWhetherNeedWriteFlash
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_DcMotorDrv_Timer
</UL>

<P><STRONG><a name="[107]"></a>sub_Timer1Min</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDeal
</UL>

<P><STRONG><a name="[106]"></a>sub_Timer1S</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDeal
</UL>

<P><STRONG><a name="[105]"></a>sub_Timer20Ms</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerDeal
</UL>

<P><STRONG><a name="[dc]"></a>timerDeal</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = timerDeal &rArr; RGB_Blue &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Timer20Ms
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Timer1S
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Timer1Min
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM25Sec
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Blue
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>API_Gets20MsFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adKey
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_Mode_Timer
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTestMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Deal
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyTimeCount
</UL>

<P><STRONG><a name="[1a5]"></a>API_Gets1MinFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>hex_to_bcd</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>my_strlen</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[1a7]"></a>my_memset</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>my_memcpy</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[1a8]"></a>my_strcpy</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>my_strcmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>int_to_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>byte_to_int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
</UL>

<P><STRONG><a name="[1ab]"></a>mcu_get_reset_wifi_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>mcu_reset_wifi</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[1ac]"></a>mcu_get_wifimode_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>mcu_set_wifi_mode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mcu_set_wifi_mode &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_LedSmartFlash
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWiFiConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_KeyInWifiCfgMode
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFactoryDefault
</UL>

<P><STRONG><a name="[101]"></a>mcu_get_wifi_work_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_LedJudge
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestDeal
</UL>

<P><STRONG><a name="[ff]"></a>mcu_start_wifitest</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mcu_start_wifitest &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetWiFiSelfcheck
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_SetWiFiSelfcheck
</UL>

<P><STRONG><a name="[10c]"></a>mcu_dp_raw_update</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>

<P><STRONG><a name="[a2]"></a>mcu_dp_bool_update</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_AllDataUpdate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_child_lock_handle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_anion_handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_switch_handle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLockLongPress
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffDeal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDeal
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizer
</UL>

<P><STRONG><a name="[af]"></a>mcu_dp_value_update</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_AllDataUpdate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffDeal
</UL>

<P><STRONG><a name="[10e]"></a>mcu_dp_string_update</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>

<P><STRONG><a name="[10f]"></a>mcu_dp_enum_update</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_WorkModeReport
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_AllDataUpdate
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_fan_speed_enum_handle
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
</UL>

<P><STRONG><a name="[110]"></a>mcu_dp_fault_update</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mcu_dp_fault_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_FaultReport
</UL>

<P><STRONG><a name="[11e]"></a>mcu_get_dp_download_bool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_child_lock_handle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_anion_handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_switch_handle
</UL>

<P><STRONG><a name="[120]"></a>mcu_get_dp_download_enum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_fan_speed_enum_handle
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[111]"></a>mcu_get_dp_download_value</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mcu_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_int
</UL>

<P><STRONG><a name="[135]"></a>uart_receive_input</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>wifi_uart_service</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, mcu_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_switch_handle &rArr; powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_queue_total_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Read_Byte
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
</UL>

<P><STRONG><a name="[143]"></a>wifi_protocol_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mcu_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Init
</UL>

<P><STRONG><a name="[119]"></a>uart_transmit_output</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifiSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_data
</UL>

<P><STRONG><a name="[11b]"></a>all_data_update</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = all_data_update &rArr; WiFi_AllDataUpdate &rArr; WiFi_FaultReport &rArr; mcu_dp_fault_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_AllDataUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[12e]"></a>wifi_test_result</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[125]"></a>dp_download_handle</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dp_download_handle &rArr; dp_download_switch_handle &rArr; powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_child_lock_handle
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_anion_handle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_fan_speed_enum_handle
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_switch_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
</UL>

<P><STRONG><a name="[12c]"></a>get_download_cmd_total</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
</UL>

<P><STRONG><a name="[10b]"></a>set_wifi_uart_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>

<P><STRONG><a name="[10d]"></a>set_wifi_uart_buffer</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
</UL>

<P><STRONG><a name="[116]"></a>get_check_sum</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[10a]"></a>wifi_uart_write_frame</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mcu_wifi_mode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_string_update
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_raw_update
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_reset_wifi
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_start_wifitest
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>

<P><STRONG><a name="[117]"></a>data_handle</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_switch_handle &rArr; powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mcu_wifi_mode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_result
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[115]"></a>get_queue_total_data</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[114]"></a>Queue_Read_Byte</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[1]"></a>NMI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, irqhandler.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>T16N0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, irqhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T16N0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_GetFlagStatus
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_Timer100Us_DCMotorDrv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>T16N2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, irqhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = T16N2_IRQHandler &rArr; ISR_Timer1MsProcess &rArr; Api_Timer1Ms_Buzzer &rArr; HW_Buzzer_Stop &rArr; HW_IOSet_BuzF &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_ClearITPendingBit
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_GetFlagStatus
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>KINT_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, irqhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KINT_IRQHandler &rArr; KINT_GetITFlag &rArr; KINT_GetKINTxIndexFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetITFlag
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_ClearITFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_MOTO_FEEDFACK
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>wifiSendByte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, irqhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>

<P><STRONG><a name="[19]"></a>UART0_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, irqhandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecByte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hr8p506.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TjFanSpeed</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, fandrv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TjFanSpeed &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_DCMotorSpeedCalc
</UL>

<P><STRONG><a name="[83]"></a>Fan_OFFctrl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fandrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_DCMotorDrv
</UL>

<P><STRONG><a name="[104]"></a>fanMsDly</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fandrv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_Timer1MsProcess
</UL>

<P><STRONG><a name="[d6]"></a>ADCInitALL</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ADCInitALL &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[139]"></a>ADCInitKey</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adLight
</UL>

<P><STRONG><a name="[137]"></a>ADCInitLight</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adKey
</UL>

<P><STRONG><a name="[136]"></a>adKey</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adKey
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInitLight
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets20MsFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adSample
</UL>

<P><STRONG><a name="[138]"></a>adLight</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adLight
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCInitKey
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adSample
</UL>

<P><STRONG><a name="[13a]"></a>Get_AD_Value</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Get_AD_Value
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIFStatus
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetIFStatus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConvValue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adSample
</UL>

<P><STRONG><a name="[dd]"></a>adSample</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adSample &rArr; Get_AD_Value
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearIFStatus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AD_Value
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adLight
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adKey
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>WiFi_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mywifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WiFi_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_protocol_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysInit
</UL>

<P><STRONG><a name="[144]"></a>WiFi_UartPutChar</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mywifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendByte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_TX_Start
</UL>

<P><STRONG><a name="[b5]"></a>WiFi_KeyInWifiCfgMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mywifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WiFi_KeyInWifiCfgMode &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAutoLongPressed
</UL>

<P><STRONG><a name="[145]"></a>WiFi_SetWiFiSelfcheck</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mywifi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_start_wifitest
</UL>

<P><STRONG><a name="[11c]"></a>WiFi_AllDataUpdate</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, mywifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = WiFi_AllDataUpdate &rArr; WiFi_FaultReport &rArr; mcu_dp_fault_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_FaultReport
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_WorkModeReport
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
</UL>

<P><STRONG><a name="[e1]"></a>WiFi_Deal</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, mywifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = WiFi_Deal &rArr; wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_switch_handle &rArr; powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_TimerSec
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_LedJudge
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_LedAPFlash
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_LedSmartFlash
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_WorkModeReport
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_AllDataUpdate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets20MsFlag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZC_Frequence
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EUART_BaudConfig
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalFilterRecValEE
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TjFanSpeed
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_DCMotorSpeedCalc
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterLife
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[14a]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[14b]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalFilterRecValEE
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_fdiv</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_dadd</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerLongPressed
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[150]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZC_Frequence
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillLedBuff
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZC_Frequence
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalFilterRecValEE
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerLongPressed
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterLife
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterLife
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerLongPressed
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iap_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
</UL>

<P><STRONG><a name="[1af]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerLongPressed
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillLedBuff
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1b0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[148]"></a>_float_epilogue</STRONG> (Thumb, 116 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[14f]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[14e]"></a>_double_epilogue</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1b3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1b4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2d]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lib_gpio.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetSelxIndexFromPin
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_SetTriggerStyleFromPin
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KINT_GetKINTxIndexFromPin
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetSELxIndexFromPin
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_SetTriggerStyleFromPin
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINT_GetPINTxIndexFromPin
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetNormalBitOffsetFromPin
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFuncxRegFromPin
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_AllDataUpdate
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;judgeUseWhichPM25Zone
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTestMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressing
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterLife
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fanAuto
</UL>

<P><STRONG><a name="[1b7]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b8]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[60]"></a>HW_Buzzer_SetFreq</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, buzzer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Buzzer
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetMAT1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T16Nx_SetMAT0
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzerDeal
</UL>

<P><STRONG><a name="[99]"></a>JudgeWhetherNeedWriteFlash</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JudgeWhetherNeedWriteFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashWrite
</UL>

<P><STRONG><a name="[be]"></a>readKey</STRONG> (Thumb, 266 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyDeal
</UL>

<P><STRONG><a name="[9d]"></a>KeyFactoryDefault</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = KeyFactoryDefault &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalFilterRecValEE
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[9f]"></a>APISleepAwaken</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLockShortPress
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAuto
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFan
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLight
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFilter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizer
</UL>

<P><STRONG><a name="[a1]"></a>KeyIonizer</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyIonizer &rArr; APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APISleepAwaken
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyReleased
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressing
</UL>

<P><STRONG><a name="[a3]"></a>KeyIonizerLongPressed</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = KeyIonizerLongPressed &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalFilterRecValEE
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[a6]"></a>KeyIonizerFilter</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyIonizerFilter &rArr; testIni &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testIni
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[a8]"></a>KeyFilter</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyFilter &rArr; APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APISleepAwaken
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyReleased
</UL>

<P><STRONG><a name="[a9]"></a>KeyFilterReset</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = KeyFilterReset &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filterPercentCal
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalFilterRecValEE
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[aa]"></a>KeyLight</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyLight &rArr; APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APISleepAwaken
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressing
</UL>

<P><STRONG><a name="[ab]"></a>KeyLightLongPressed</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = KeyLightLongPressed &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[b0]"></a>KeyPower</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyPower &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOff
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffDeal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnDeal
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressing
</UL>

<P><STRONG><a name="[b1]"></a>KeyFan</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyFan &rArr; APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APISleepAwaken
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressing
</UL>

<P><STRONG><a name="[b2]"></a>KeyFanLongPressed</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = KeyFanLongPressed &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[b3]"></a>KeyAuto</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = KeyAuto &rArr; APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APISleepAwaken
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub_AutoFanSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressing
</UL>

<P><STRONG><a name="[b8]"></a>KeyPressing</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = KeyPressing &rArr; KeyAuto &rArr; APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAuto
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFan
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPower
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLight
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizer
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyHoldDeal
</UL>

<P><STRONG><a name="[b9]"></a>keyHoldDeal</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = keyHoldDeal &rArr; KeyIonizerLongPressed &rArr; filterPercentCal &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLockLongPress
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyAutoLongPressed
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPressing
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFanLongPressed
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLightLongPressed
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFilterReset
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerFilter
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizerLongPressed
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFactoryDefault
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyDeal
</UL>

<P><STRONG><a name="[ba]"></a>KeyReleased</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = KeyReleased &rArr; KeyLockShortPress &rArr; APISleepAwaken &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLockShortPress
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyFilter
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIonizer
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyDeal
</UL>

<P><STRONG><a name="[bb]"></a>KeyTimeCount</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyTimeCount
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets20MsFlag
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyDeal
</UL>

<P><STRONG><a name="[bf]"></a>sub_Disp_Timer</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sub_Disp_Timer &rArr; RGBOff &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOff
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[c0]"></a>factoryRecoverDis</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = factoryRecoverDis &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOff
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_LEDScanDrv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets1SFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[c1]"></a>FillLedBuff</STRONG> (Thumb, 660 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FillLedBuff &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalDis
</UL>

<P><STRONG><a name="[c3]"></a>normalDis</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = normalDis &rArr; Api_LEDScanDrv &rArr; SubTm1623Drv &rArr; HW_IOSet_TM1623STB &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillLedBuff
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_LEDScanDrv
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[c4]"></a>led</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = led &rArr; ledTestMode &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTestMode
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_Blue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;normalDis
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;factoryRecoverDis
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_LEDScanDrv
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[c7]"></a>RGB_Deal</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RGB_Deal &rArr; JudgeRingColour &rArr; RGB_Red &rArr; RGBOn &rArr; RGBProcess &rArr; GPIO_ResetBit &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGBOff
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Gets20MsFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display
</UL>

<P><STRONG><a name="[ed]"></a>judgeUseWhichPM25Zone</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = judgeUseWhichPM25Zone &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JudgeRingColour
</UL>

<P><STRONG><a name="[f2]"></a>ISR_UART_RX</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, pm25.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISR_UART_RX
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RecByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>dp_download_switch_handle</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = dp_download_switch_handle &rArr; powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[11f]"></a>dp_download_mode_handle</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dp_download_mode_handle &rArr; modeSet &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[121]"></a>dp_download_fan_speed_enum_handle</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dp_download_fan_speed_enum_handle &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[122]"></a>dp_download_anion_handle</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = dp_download_anion_handle &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;API_Buzzer_Set
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anionSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[124]"></a>dp_download_child_lock_handle</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, protocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = dp_download_child_lock_handle &rArr; lockSet &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lockSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[126]"></a>wifi_uart_write_data</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_output
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[127]"></a>heat_beat_check</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = heat_beat_check &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[128]"></a>product_info_update</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = product_info_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[12a]"></a>get_mcu_wifi_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_mcu_wifi_mode &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[12b]"></a>get_dowmload_dpid_index</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_dowmload_dpid_index
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_download_cmd_total
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
</UL>

<P><STRONG><a name="[12d]"></a>data_point_handle</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = data_point_handle &rArr; dp_download_handle &rArr; dp_download_switch_handle &rArr; powerSet &rArr; PowerOffDeal &rArr; API_Buzzer_Set &rArr; HW_Buzzer_SetFreq &rArr; Init_Buzzer &rArr; GPIO_Init &rArr; GPIO_SetSingalTypeFromPin &rArr; GPIO_GetNormalBitOffsetFromPin &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[13f]"></a>WiFi_WorkModeReport</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mywifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WiFi_WorkModeReport &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_AllDataUpdate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
</UL>

<P><STRONG><a name="[140]"></a>WiFi_FaultReport</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mywifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WiFi_FaultReport &rArr; mcu_dp_fault_update &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_AllDataUpdate
</UL>

<P><STRONG><a name="[141]"></a>WiFi_LedSmartFlash</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mywifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WiFi_LedSmartFlash &rArr; mcu_set_wifi_mode &rArr; wifi_uart_write_frame &rArr; wifi_uart_write_data &rArr; uart_transmit_output &rArr; wifiSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
</UL>

<P><STRONG><a name="[146]"></a>WiFi_LedAPFlash</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, mywifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
</UL>

<P><STRONG><a name="[142]"></a>WiFi_LedJudge</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, mywifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WiFi_LedJudge
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_wifi_work_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
</UL>

<P><STRONG><a name="[147]"></a>WiFi_TimerSec</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, mywifi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WiFi_Deal
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
